.data
	string_access_violation: .asciiz "Access Violation"
	string_illegal_div_by_0: .asciiz "Illegal Division By Zero"
	string_invalid_ptr_dref: .asciiz "Invalid Pointer Dereference"
	#Globals
	max: .word 32767
	min: .word -32768

vt_Person:

.globl main
.text

main:
	jal user_main
	li $v0,10
	syscall

###################
#### INT FLOW #####
###################

#Int flow check
int_flow_check:
	sub $sp,$sp,4
	sw $s0,0($sp)
	lw $s0,min
	lw $s1,max
	bge $a0,$s0,check_int_overflow
	move $a0, $s0

	check_int_overflow:
		ble $a0,$s1,ret_int_flow_check
		move $a0,$s1

	ret_int_flow_check:
		lw $s0,0($sp)
		addu $sp,$sp,4
		jr $ra

###################
## DIVISION CHECK #
###################

#Division checks
check_division:
	beq $a1,$zero,exit_illegal_division
	div $a0,$a1
	mflo $a0
	mfhi $a1

	#If Remainder == 0, result is good
	beq $a1,$zero,end_div

	#Else, check if result < 0
	blt $a0,$zero,adjust_floor_div
	j end_div

	#Result needs to be floored
	adjust_floor_div:
		sub $a0,$a0,1
	end_div:
		jr $ra

	exit_illegal_division:
		li $v0,4
		la $a0,string_illegal_div_by_0
		syscall
		li $v0,10
		syscall

###################
# STRING ADDITION #
###################

#Allocate memory for new string
string_mem_alloc:
	addi $sp,$sp,-20
	sw $ra,16($sp)
	sw $s0,12($sp)
	sw $s1,8($sp)
	sw $s2,4($sp)
	sw $s3,0($sp)
	move $s0,$a1
	move $s1,$a2
	li $s2,0

	str1_mem_alloc:
		lb $s3,0($s0)
		beq $s3,$zero, str2_mem_alloc
		addiu $s2,$s2, 1
		addiu $s0,$s0, 1
		j str1_mem_alloc

	str2_mem_alloc:
		lb $s3,0($s1)
		beq $s3,$zero, ret_str_mem_alloc
		addiu $s2,$s2,1
		addiu $s1,$s1,1
		j str2_mem_alloc

	ret_str_mem_alloc:
		addiu $s2,$s2,1
		move $a0,$s2
		li $v0,9
		syscall
		move $a0,$v0
		lw $ra,16($sp)
		lw $s0,12($sp)
		lw $s1,8($sp)
		lw $s2,4($sp)
		lw $s3,0($sp)
		addi $sp,$sp,20
		jr $ra

#Concat strings
concat_strs:
	subu $sp,$sp,20
	sw $ra,16($sp)
	sw $s0,12($sp)
	sw $s1,8($sp)
	sw $s2,4($sp)
	sw $s3,0($sp)
	move $s0,$a1
	move $s1,$a2
	move $s3,$a0

	copy_str1:
		lb $s2,0($s0)
		beq $s2,$zero,copy_str2
		sb $s2,0($s3)
		addiu $s0,$s0,1
		addiu $s3,$s3,1
		j copy_str1

	copy_str2:
		lb $s2,0($s1)
		beq $s2,$zero,ret_concat_strs
		sb $s2,0($s3)
		addiu $s1,$s1,1
		addiu $s3,$s3,1
		j copy_str2

	ret_concat_strs:
		sb $zero,0($s3)
		lw $ra,16($sp)
		lw $s0,12($sp)
		lw $s1,8($sp)
		lw $s2,4($sp)
		lw $s3,0($sp)
		addu $sp,$sp,20
		jr $ra

###################
# STRING EQUALITY #
###################

#String equality check
string_eq_check:
	addi $sp,$sp,-24
	sw $ra,20($sp)
	sw $s0,16($sp)
	sw $s1,12($sp)
	sw $s2,8($sp)
	sw $s3,4($sp)
	sw $s4,0($sp)
	move $s0,$zero
	move $s1,$a0
	move $s2,$a1

	eq_by_char:
		lb $s3,0($s1)
		lb $s4,0($s2)
		bne $s3,$s4,ret_strs_eq_check
		beq $s3,$zero,ret_strs_eq
		addu $s1,$s1,1
		addu $s2,$s2,1
		j eq_by_char

	ret_strs_eq:
		li $s0,1

	ret_strs_eq_check:
		move $v0,$s0
		lw $ra,20($sp)
		lw $s0,16($sp)
		lw $s1,12($sp)
		lw $s2,8($sp)
		lw $s3,4($sp)
		lw $s4,0($sp)
		addi $sp,$sp,24
		jr $ra

###################
# ILLEGAL ACCESS  #
###################

exit_access_violation:
	li $v0,4
	la $a0,string_access_violation
	syscall
	li $v0,10
	syscall

exit_invalid_ptr_dref:
	li $v0,4
	la $a0,string_invalid_ptr_dref
	syscall
	li $v0,10
	syscall

foo:
	#Prologue
	subu $sp,$sp,4
	sw $ra,0($sp)
	subu $sp,$sp,4
	sw $fp,0($sp)
	move $fp,$sp
	#Caller saves $t0-$t9
	subu $sp,$sp,4
	sw $t0,0($sp)
	subu $sp,$sp,4
	sw $t1,0($sp)
	subu $sp,$sp,4
	sw $t2,0($sp)
	subu $sp,$sp,4
	sw $t3,0($sp)
	subu $sp,$sp,4
	sw $t4,0($sp)
	subu $sp,$sp,4
	sw $t5,0($sp)
	subu $sp,$sp,4
	sw $t6,0($sp)
	subu $sp,$sp,4
	sw $t7,0($sp)
	subu $sp,$sp,4
	sw $t8,0($sp)
	subu $sp,$sp,4
	sw $t9,0($sp)
	#Freeing space for local vars
	sub $sp,$sp,4

	subu $sp,$sp,4
	sw $s0,0($sp)
	li $v0,9
	li $a0,8
	syscall
	move $t0,$v0
	la $s0,vt_Person
	sw $s0,0($t0)
	li $s0,5
	sw $s0,4($t0)
	lw $s0,0($sp)
	addu $sp,$sp,4
	li $t1,8
	lw $t0,-44($fp)
	beqz $t0,exit_invalid_ptr_dref
	sw $t1,4($t0)

foo_epilogue:
	#Epilogue
	move $sp,$fp
	#Caller restores $t0-$t9
	lw $t0,-4($sp)
	lw $t1,-8($sp)
	lw $t2,-12($sp)
	lw $t3,-16($sp)
	lw $t4,-20($sp)
	lw $t5,-24($sp)
	lw $t6,-28($sp)
	lw $t7,-32($sp)
	lw $t8,-36($sp)
	lw $t9,-40($sp)

	lw $fp,0($sp)
	lw $ra,4($sp)
	addu $sp,$sp,8
	jr $ra

user_main:
	#Prologue
	subu $sp,$sp,4
	sw $ra,0($sp)
	subu $sp,$sp,4
	sw $fp,0($sp)
	move $fp,$sp
	#Caller saves $t0-$t9
	subu $sp,$sp,4
	sw $t0,0($sp)
	subu $sp,$sp,4
	sw $t1,0($sp)
	subu $sp,$sp,4
	sw $t2,0($sp)
	subu $sp,$sp,4
	sw $t3,0($sp)
	subu $sp,$sp,4
	sw $t4,0($sp)
	subu $sp,$sp,4
	sw $t5,0($sp)
	subu $sp,$sp,4
	sw $t6,0($sp)
	subu $sp,$sp,4
	sw $t7,0($sp)
	subu $sp,$sp,4
	sw $t8,0($sp)
	subu $sp,$sp,4
	sw $t9,0($sp)
	#Freeing space for local vars
	sub $sp,$sp,0

	jal foo
	addu $sp,$sp,0
	move $t0,$v0

main_epilogue:
	#Epilogue
	move $sp,$fp
	#Caller restores $t0-$t9
	lw $t0,-4($sp)
	lw $t1,-8($sp)
	lw $t2,-12($sp)
	lw $t3,-16($sp)
	lw $t4,-20($sp)
	lw $t5,-24($sp)
	lw $t6,-28($sp)
	lw $t7,-32($sp)
	lw $t8,-36($sp)
	lw $t9,-40($sp)

	lw $fp,0($sp)
	lw $ra,4($sp)
	addu $sp,$sp,8
	jr $ra


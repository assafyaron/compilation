/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;
import java.io.PrintWriter;

parser code 
{:
	public Lexer lexer;
	public boolean errorInLexer = false;
	public PrintWriter fileWriter;
	public int lastTokenLine;


	public Parser(Lexer lexer, PrintWriter fileWriter)
	{
		super(lexer);
		this.lexer = lexer;
		lastTokenLine = 0;
		this.fileWriter = fileWriter;

	}
	public void report_error(String message, Object info)
	{
		if(errorInLexer){
			fileWriter.write("ERROR\n");
		}
		else{
			fileWriter.write("ERROR("+lexer.getLine()+")\n");
		}
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");	
		fileWriter.close();
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	this.lastTokenLine = lexer.getLine();
	s = lexer.next_token();
	//System.out.print(s.sym);
	if(s.sym == TokenNames.error){
		errorInLexer = true;
	}
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("]");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/

terminal PLUS;
terminal MINUS;
terminal TIMES; 
terminal DIVIDE;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal COMMA;
terminal DOT;
terminal SEMICOLON;
terminal TYPE_INT;
terminal TYPE_VOID;
terminal TYPE_STRING;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal GT;
terminal ARRAY;
terminal EXTENDS;
terminal RETURN;
terminal WHILE;
terminal IF;
terminal NEW;
terminal NIL;
terminal RBRACE;
terminal LBRACE;
terminal ERROR;
terminal START_COMMENT;
terminal END_COMMENT;


/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;
terminal Integer CLASS;
terminal Integer LPAREN;



/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_PROGRAM program;
non terminal AST_DEC dec;
non terminal AST_VAR_DEC varDec;
non terminal AST_FUNC_DEC funcDec;
non terminal AST_CLASS_DEC classDec;
non terminal AST_ARRAY_TYPE_DEF arrayTypedef;
non terminal AST_TYPE type;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;
non terminal AST_CFIELD cField;
non terminal AST_EXP exp;
non terminal AST_NEW_EXP newExp;
non terminal AST_CFIELD_REC cFieldRec;
non terminal AST_FUNC_DEC_ARGS_LIST funcDecArgs;
non terminal AST_EXP_ARGUMENTS expArguments;
non terminal AST_FUNCTION function;
non terminal AST_FUNC_STMT funcStmt;




/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence nonassoc ASSIGN;
precedence left EQ;
precedence left LT, GT;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence nonassoc LBRACK;
precedence nonassoc LPAREN;
precedence left DOT;

/************************/
/* START WITH: program */
/************************/
start with program;

/********************/
/* DERIVATION RULES */
/********************/

program ::=
dec:d {: RESULT = new AST_PROGRAM_REC(d, null); :}
| dec:d program:p {: RESULT = new AST_PROGRAM_REC(d, p); :}
;

dec ::=
varDec:var_dec {: RESULT = new AST_DEC_VAR_DEC(var_dec); :}
| funcDec:func_dec {: RESULT = new AST_DEC_FUNC_DEC(func_dec); :}
| classDec:class_dec {: RESULT = new AST_DEC_CLASS_DEC(class_dec); :}
| arrayTypedef:array_type_def {: RESULT = new AST_DEC_ARRAY_TYPE_DEF(array_type_def); :}
;

type ::=
TYPE_INT {: RESULT = new AST_TYPE_INT(); :}
| TYPE_STRING {: RESULT = new AST_TYPE_STRING(); :}
| TYPE_VOID {: RESULT = new AST_TYPE_VOID(); :}
| ID:name {: RESULT = new AST_TYPE_ID(name, parser.lastTokenLine); :}
;

stmtList ::=	
stmt:s	stmtList:l {: RESULT = new AST_STMT_LIST(s, l); :}
| stmt:s {: RESULT = new AST_STMT_LIST(s,null); :}
;

var ::=				     
ID:name	 {: RESULT = new AST_VAR_SIMPLE(name, parser.lastTokenLine); :}
| var:v DOT ID:fieldName {: RESULT = new AST_VAR_FIELD(v, fieldName, parser.lastTokenLine); :} 
| var:v LBRACK exp:e RBRACK {: RESULT = new AST_VAR_SUBSCRIPT(v, e, parser.lastTokenLine); :} 
;
					
stmt ::= 
varDec:var_dec {: RESULT = new AST_STMT_VAR_DEC(var_dec); :}
| var:v ASSIGN exp:e SEMICOLON {: RESULT = new AST_STMT_ASSIGN(v, e, parser.lastTokenLine); :}
| var:v ASSIGN newExp:new_exp SEMICOLON {: RESULT = new AST_STMT_ASSIGN_NEW(v, new_exp, parser.lastTokenLine); :}
| RETURN SEMICOLON {: RESULT = new AST_STMT_RETURN_NO_EXP(parser.lastTokenLine); :}
| RETURN exp:e SEMICOLON {: RESULT = new AST_STMT_RETURN_EXP(e, parser.lastTokenLine); :}
| IF LPAREN:line exp:cond RPAREN LBRACE stmtList:body RBRACE {: RESULT = new AST_STMT_IF(cond,body, line); :}
| WHILE LPAREN:line exp:cond RPAREN LBRACE stmtList:body RBRACE {: RESULT = new AST_STMT_WHILE(cond,body, line); :}
| funcStmt:f {: RESULT = new AST_STMT_FUNC_STMT(f); :}
;


classDec ::=
CLASS:line ID:name LBRACE cFieldRec:cFR  RBRACE {: RESULT = new AST_CLASS_DEC_SIMPLE(name, cFR, line); :}
| CLASS:line ID:className EXTENDS ID:superClassName LBRACE cFieldRec:cFR  RBRACE {: RESULT = new AST_CLASS_DEC_EXTENDS(className, superClassName, cFR, line); :}
;


cFieldRec ::=
cField:cF {: RESULT = new AST_CFIELD_REC(cF, null); :}
| cField:cF cFieldRec:cFR   {: RESULT = new AST_CFIELD_REC(cF, cFR); :}
;


funcDec ::=
type:t ID:name LPAREN:line RPAREN LBRACE stmtList:body RBRACE {: RESULT = new AST_FUNC_DEC_NO_ARGS(t, name, body, line); :}
| type:t ID:name LPAREN:line funcDecArgs:args RPAREN LBRACE stmtList:body RBRACE {: RESULT = new AST_FUNC_DEC_ARGS(t, name, args, body, line); :}
;

funcDecArgs ::=
type:t ID:name {: RESULT = new AST_FUNC_DEC_ARGS_LIST(t, name, null, parser.lastTokenLine); :}
| type:t ID:name COMMA funcDecArgs:args  {: RESULT = new AST_FUNC_DEC_ARGS_LIST(t, name, args, parser.lastTokenLine); :}
;

varDec ::=
type:t ID:name SEMICOLON {: RESULT = new AST_VAR_DEC_NO_ARGS(t, name, parser.lastTokenLine); :}
| type:t ID:name ASSIGN exp:e SEMICOLON {: RESULT = new AST_VAR_DEC_ARGS(t, name, e, parser.lastTokenLine); :}
| type:t ID:name ASSIGN newExp:nE SEMICOLON {: RESULT = new AST_VAR_DEC_NEW_EXP_ARGS(t, name, nE, parser.lastTokenLine); :}
;

arrayTypedef ::=
ARRAY ID:name EQ type:t LBRACK RBRACK SEMICOLON {: RESULT = new AST_ARRAY_TYPE_DEF_SIMPLE(name, t, parser.lastTokenLine); :}
;


exp ::=	   
var:v {: RESULT = new AST_EXP_VAR(v); :}
| LPAREN exp:e RPAREN {: RESULT = new AST_EXP_INSIDE_PAREN(e); :} 
| exp:e1 PLUS  exp:e2 {: RESULT = new AST_EXP_BINOP(e1, e2, 0, parser.lastTokenLine); :}
| exp:e1 MINUS exp:e2 {: RESULT = new AST_EXP_BINOP(e1, e2, 1, parser.lastTokenLine); :}
| exp:e1 TIMES  exp:e2 {: RESULT = new AST_EXP_BINOP(e1, e2, 2, parser.lastTokenLine);:}
| exp:e1 DIVIDE exp:e2 {: RESULT = new AST_EXP_BINOP(e1, e2, 3, parser.lastTokenLine);:}
| exp:e1 LT  exp:e2 {: RESULT = new AST_EXP_BINOP(e1, e2, 4, parser.lastTokenLine);:}
| exp:e1 GT exp:e2 {: RESULT = new AST_EXP_BINOP(e1, e2, 5, parser.lastTokenLine);:}
| exp:e1 EQ exp:e2 {: RESULT = new AST_EXP_BINOP(e1, e2, 6, parser.lastTokenLine);:}
| function:f {: RESULT = new AST_EXP_FUNCTION(f); :}
| INT:i {: RESULT = new AST_EXP_INT(i); :}
| MINUS INT:i {: RESULT = new AST_EXP_MINUS_INT(i); :}
| NIL {: RESULT = new AST_EXP_NIL(); :}
| STRING:s {: RESULT = new AST_EXP_STRING(s); :}
;

newExp ::=  
NEW type:t {: RESULT = new AST_NEW_TYPE(t); :}
| NEW type:t LBRACK exp:e RBRACK {: RESULT = new AST_NEW_TYPE_EXP_IN_BRACKS(t, e, parser.lastTokenLine); :}
;

cField ::=
varDec:var_dec {: RESULT = new AST_CFIELD_VAR_DEC(var_dec); :}
| funcDec:func_dec {: RESULT = new AST_CFIELD_FUNC_DEC(func_dec); :}
;

function ::=
ID:name LPAREN RPAREN {: RESULT = new AST_FUNCTION_NO_ARGS(name, parser.lastTokenLine); :}
| var:v DOT ID:name LPAREN RPAREN {: RESULT = new AST_FUNCTION_VAR_DOT_NO_ARGS(v, name, parser.lastTokenLine); :}
| var:v DOT ID:name LPAREN expArguments:eA RPAREN {: RESULT = new AST_FUNCTION_VAR_DOT_ARGS(v, name, eA, parser.lastTokenLine); :}
| ID:name LPAREN expArguments:eA RPAREN {: RESULT = new AST_FUNCTION_ARGS(name, eA, parser.lastTokenLine); :}
;


expArguments ::=
exp:e {: RESULT = new AST_EXP_ARGUMENTS(e, null); :}
| exp:e COMMA expArguments:eA  {: RESULT = new AST_EXP_ARGUMENTS(e, eA); :}
;


funcStmt ::=
ID:name LPAREN RPAREN SEMICOLON {: RESULT = new AST_FUNC_STMT_NO_ARGS(name, parser.lastTokenLine); :}
| var:v DOT ID:name LPAREN RPAREN SEMICOLON {: RESULT = new AST_FUNC_STMT_VAR_DOT_NO_ARGS(v, name, parser.lastTokenLine); :}
| ID:name LPAREN expArguments:eA RPAREN SEMICOLON {: RESULT = new AST_FUNC_STMT_ARGS(name, eA, parser.lastTokenLine); :}
| var:v DOT ID:name LPAREN expArguments:eA RPAREN SEMICOLON {: RESULT = new AST_FUNC_STMT_VAR_DOT_ARGS(v, name, eA, parser.lastTokenLine); :}
;
